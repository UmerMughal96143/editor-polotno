[{"/Users/umermughal/Umer's Work/Farhan's work/editor-polotno/src/index.js":"1","/Users/umermughal/Umer's Work/Farhan's work/editor-polotno/src/App.js":"2","/Users/umermughal/Umer's Work/Farhan's work/editor-polotno/src/reportWebVitals.js":"3","/Users/umermughal/Umer's Work/Farhan's work/editor-polotno/src/templates-panel.js":"4"},{"size":500,"mtime":1627748469156,"results":"5","hashOfConfig":"6"},{"size":1413,"mtime":1627747895214,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1627590953704,"results":"8","hashOfConfig":"6"},{"size":1779,"mtime":1627748047768,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17kjnot",{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/Users/umermughal/Umer's Work/Farhan's work/editor-polotno/src/index.js",[],"/Users/umermughal/Umer's Work/Farhan's work/editor-polotno/src/App.js",["20"],"import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { PolotnoContainer, SidePanelWrap, WorkspaceWrap } from 'polotno';\nimport { Workspace } from 'polotno/canvas/workspace';\nimport { SidePanel } from 'polotno/side-panel';\nimport { Toolbar } from 'polotno/toolbar/toolbar';\nimport { ZoomButtons } from 'polotno/toolbar/zoom-buttons';\nimport { createStore } from 'polotno/model/store';\n\nimport { DEFAULT_SECTIONS } from 'polotno/side-panel';\nimport { TemplatesSection } from './templates-panel';\n\nconst store = createStore({\n  // this is a demo key just for that project\n  // (!) please don't use it in your projects\n  // to create your own API key please go here: https://polotno.dev/cabinet\n  key: 'nFA5H9elEytDyPyvKL7T',\n  // you can hide back-link on a paid licence\n  // but it will be good if you can keep it for Polotno project support\n  showCredit: true,\n});\n\nstore.addPage();\n\nconst sections = [TemplatesSection, ...DEFAULT_SECTIONS];\n\nexport const App = () => {\n  return (\n    <PolotnoContainer>\n      <SidePanelWrap>\n        <SidePanel\n          store={store}\n          sections={sections}\n          defaultSection=\"templates\"\n        />\n      </SidePanelWrap>\n      <WorkspaceWrap>\n        <Toolbar store={store} downloadButtonEnabled />\n        <Workspace store={store} />\n        <ZoomButtons store={store} />\n      </WorkspaceWrap>\n    </PolotnoContainer>\n  );\n};\n\nexport default App;\n","/Users/umermughal/Umer's Work/Farhan's work/editor-polotno/src/reportWebVitals.js",[],"/Users/umermughal/Umer's Work/Farhan's work/editor-polotno/src/templates-panel.js",["21"],"import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { useSWRInfinite } from \"swr\";\n\nimport { SectionTab } from \"polotno/side-panel\";\nimport MdPhotoLibrary from \"@meronex/icons/md/MdPhotoLibrary\";\n\nimport { ImagesGrid } from \"polotno/side-panel/images-grid\";\n\nexport const TemplatesPanel = observer(({ store }) => {\n  // load data\n  const { data, error, mutate, size, setSize } = useSWRInfinite(\n    (index) => `templates/page${index + 1}.json`\n  );\n\n  // do some calculations from the hook above\n  const isLoadingInitialData = !data && !error;\n  const isLoading =\n    isLoadingInitialData ||\n    !!(size > 0 && data && typeof data[size - 1] === \"undefined\");\n  const isEmpty = data?.[0]?.length === 0;\n  const isReachingEnd = isEmpty || (data && data[0].total_pages === size);\n\n  const loadMore = () => {\n    if (!isReachingEnd) {\n      setSize(size + 1);\n    }\n  };\n\n  return (\n    <div style={{ height: \"100%\" }}>\n      <ImagesGrid\n        shadowEnabled={false}\n        images={data?.map((data) => data.items).flat()}\n        getPreview={(item) => `/templates/${item.preview}`}\n        isLoading={isLoading}\n        onSelect={async (item) => {\n          // download selected json\n          const req = await fetch(`/templates/${item.json}`);\n          const json = await req.json();\n          // just inject it into store\n          store.loadJSON(json);\n        }}\n        loadMore={loadMore}\n        rowsNumber={1}\n      />\n    </div>\n  );\n});\n\n// define the new custom section\nexport const TemplatesSection = {\n  name: \"templates\",\n  Tab: (props) => (\n    <SectionTab name=\"Templates\" {...props}>\n      <MdPhotoLibrary />\n    </SectionTab>\n  ),\n  // we need observer to update component automatically on any store changes\n  Panel: TemplatesPanel\n};\n",{"ruleId":"22","severity":1,"message":"23","line":2,"column":8,"nodeType":"24","messageId":"25","endLine":2,"endColumn":16},{"ruleId":"22","severity":1,"message":"26","line":12,"column":24,"nodeType":"24","messageId":"25","endLine":12,"endColumn":30},"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'mutate' is assigned a value but never used."]